/*
 * The MIT License
 *
 * Copyright 2023 Alarcon Vinicius.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * ---
 * 
 * Este projeto √© disponibilizado sob a licen√ßa MIT.
 * 
 * üîó LinkedIn: https://www.linkedin.com/in/vin%C3%ADcius-alarcon-52a8a820a/
 * üîó GitHub: https://github.com/AlarconVinicius
 * üíº Website: http://alarconvinicius.com.br/
 */
package Business.Services;

import Database.Models.User;
import Database.Repositories.UserRepository;

/**
 * Servi√ßo de autentica√ß√£o para realizar login de usu√°rios no sistema. Este
 * servi√ßo lida com opera√ß√µes de autentica√ß√£o, incluindo tentativas de login e
 * verifica√ß√£o da exist√™ncia de um usu√°rio no sistema.
 *
 * @author Alarcon Vinicius
 */
public class AuthService {

    /**
     * Construtor padr√£o da classe AuthService. Inicializa um novo objeto
     * AuthService.
     */
    public AuthService() {
    }

    /**
     * Realiza uma tentativa de login com um email e senha fornecidos.
     *
     * @param user Usu√°rio a ser autenticado.
     * @return O usu√°rio autenticado se o login for bem-sucedido, ou null caso
     * contr√°rio.
     */
    public final User login(User user) {
        UserRepository userRepository = new UserRepository();

        // Verifica se o usu√°rio existe no sistema
        if (!userExists(user.getEmail())) {
            return null;
        }

        User userDb = userRepository.getByEmail(user.getEmail());

        // Compara as credenciais fornecidas com as do usu√°rio no banco de dados
        if (user.getEmail().equals(userDb.getEmail()) && user.getPassword().equals(userDb.getPassword())) {
            return userDb;
        }
        return null;
    }

    /**
     * Verifica se um usu√°rio com o email fornecido existe no sistema.
     *
     * @param email O email do usu√°rio a ser verificado.
     * @return true se o usu√°rio existir, false caso contr√°rio.
     */
    private boolean userExists(String email) {
        // Obt√©m o reposit√≥rio de usu√°rios e verifica se o usu√°rio existe
        UserRepository userRepository = new UserRepository();
        User user = userRepository.getByEmail(email);

        if (user == null) {
            return false;
        }

        return true;
    }
}
